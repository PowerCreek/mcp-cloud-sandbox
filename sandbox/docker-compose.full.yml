services:
  mcp-gateway:
    build: ../sandbox-template
    container_name: mcp-gateway
    env_file:
      - ./.env
    environment:
      - PORT=8080
    ports:
      - "8080:8080"
    networks:
      - ai-net
    labels:
      - "com.microsoft.devcontainer.name=MCP Gateway"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on:
      - neo4j-db
      - neo4j-memory-service
      - neo4j-cypher-service
      - neo4j-data-modeling-service

  agentic-sandbox:
    build: .
    container_name: agentic-sandbox
    env_file:
      - ./.env
    volumes:
      - .:/workspace:ro
    privileged: true # Needed for Docker-in-Docker
    ports:
      - "3000:3000"
    networks:
      - ai-net
    labels:
      - "com.microsoft.devcontainer.name=Agentic AI Sandbox"
    depends_on:
      - mcp-gateway
    tty: true
    stdin_open: true

  # Neo4j Database for MCP services
  neo4j-db:
    image: neo4j:5.15
    container_name: neo4j-db
    env_file:
      - ./.env
    environment:
      - NEO4J_AUTH=neo4j/password123
      - NEO4J_PLUGINS=["apoc"]
      - NEO4J_apoc_export_file_enabled=true
      - NEO4J_apoc_import_file_enabled=true
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
    ports:
      - "7474:7474"
      - "7687:7687"
    networks:
      - ai-net
    healthcheck:
      test: [ "CMD", "cypher-shell", "-u", "${NEO4J_USERNAME:-neo4j}", "-p", "${NEO4J_PASSWORD:-password123}", "RETURN 1" ]
      interval: 30s
      timeout: 10s
      retries: 5

  # Neo4j Memory MCP Service
  neo4j-memory-service:
    image: mcp/neo4j-memory:latest
    container_name: neo4j-memory-service
    env_file:
      - ./.env
    environment:
      - NEO4J_URL=${NEO4J_URI:-bolt://neo4j-db:7687}
      - NEO4J_USERNAME=${NEO4J_USERNAME:-neo4j}
      - NEO4J_PASSWORD=${NEO4J_PASSWORD:-password123}
    networks:
      - ai-net
    depends_on:
      neo4j-db:
        condition: service_healthy
    stdin_open: true
    tty: true

  # Neo4j Cypher MCP Service  
  neo4j-cypher-service:
    image: mcp/neo4j-cypher:latest
    container_name: neo4j-cypher-service
    env_file:
      - ./.env
    environment:
      - NEO4J_URL=${NEO4J_URI:-bolt://neo4j-db:7687}
      - NEO4J_USERNAME=${NEO4J_USERNAME:-neo4j}
      - NEO4J_PASSWORD=${NEO4J_PASSWORD:-password123}
    networks:
      - ai-net
    depends_on:
      neo4j-db:
        condition: service_healthy
    stdin_open: true
    tty: true

  # Neo4j Data Modeling MCP Service
  neo4j-data-modeling-service:
    image: mcp/neo4j-data-modeling:latest
    container_name: neo4j-data-modeling-service
    env_file:
      - ./.env
    environment:
      - NEO4J_URL=${NEO4J_URI:-bolt://neo4j-db:7687}
      - NEO4J_USERNAME=${NEO4J_USERNAME:-neo4j}
      - NEO4J_PASSWORD=${NEO4J_PASSWORD:-password123}
    networks:
      - ai-net
    depends_on:
      neo4j-db:
        condition: service_healthy
    stdin_open: true
    tty: true

  # Sequential Thinking MCP Service
  sequential-thinking-service:
    image: mcp/sequentialthinking:latest
    container_name: sequential-thinking-service
    networks:
      - ai-net
    stdin_open: true
    tty: true

networks:
  ai-net:
    driver: bridge

volumes:
  neo4j_data:
  neo4j_logs:
